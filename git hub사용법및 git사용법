깃 사용법
프로그램설치-------3가지필요
1.깃 
2.비쥬얼스튜디오
3.소스트리

시작명령어
깃에 프로잭트 생성.
프로잭트 폴더생성 --->해당 프로잭트 폴더 에 우클릭으로 Git Bash 로 cli창 오픈 또는 해당폴더 vscode오픈후 Cntl+`사용 터미널창에 입력도구
사용을 bash로변경후 명령어입력
명령어입력순서
1-1.git init =해당폴더를 깃저장 소화 함(깃에대한 모든 로그 정보 수납장)
1.2git config global user.name"깃허브사용 아이디"
1.3git config global user.mail"깃허브 사용 이메일"
2.git remote add origin git@"깃허브 사용주소" 를 입력하여 해당 깃허브 프로젝트 주소를 원격 연결

사용 시작법
  1.기존 프로잭트물이 깃헙에있고 새로운 플랫폼에서 해당 작업을 계속 진행하고싶을시
   폴더작성 1-2 반복후 git pull origin master 이용 해당 깃허브의 프로잭트를 폴더에 다운로드하여 동기화
  2.git pull origin master  명령어로 동기화

git 명령어

 git add -A   -----=변경내용을 깃에저장(온라인저장이아닌 프로잭트 진행 폴더내의 깃 폴더에 내깃 변경 소스를저장하는것임)
 git commit -m "블라블라 " 진행및 변경된 내용을 저장후 해당 사항을 코맨트를 붙여서 그동안 작업한 변환 소스및 모든내용을 저장한 태그를 닮
 git push origin master(or해당 작업하던 브랜치 이름)   ========변경사항을 내 Github 레파지토리에 최종 업데이트.

    BRANCH명령어

git branch   해당 프로잭트내에 존재하는 모든프로잭트 브랜치를 확인
git checkout "브랜치명"  이동하고자하는 브랜치명을 입력후 해당 브랜치로 동기화
git merge "병합하고자하는 브랜치이름"  IF>현재 진행중인 브랜치 "1" 에서 "MASTER"브랜치로 병합 1의내용이 MASTER의 내용으로 덮혀들어가 병합된다.

LOG명령어

git log 입력시 현재 커밋된 모든 로그 사항을 표현해줌 첫 입력 엔터시 최근 정보만 뜨며 엔터로 계속넘길시 밑으로내려갈수록 오래된 최초 커밋까지 살펴볼수있음
        모든정보확인 및 확인하고싶은 로그 확인완료시 ; + Q 를 눌러서 터미널 명령 어 로 복귀가능

git log --all --graph --decorate   해당명령어 실행시 여태껏 이프로잭트에서 발생한모든커밋과 브랜치를 그래픽으로 가시성좋게 확인가능 밑으로갈수록 최초 커밋

